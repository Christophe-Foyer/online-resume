// qEasyListSplitter - split list into columns
//
// original by:
/*
 *   easyListSplitter 1.0.2 - jQuery Plugin
 *  written by Andrea Cima Serniotti  
 *  http://www.madeincima.eu
 *
 *  Copyright (c) 2010 Andrea Cima Serniotti (http://www.madeincima.eu)
 *  Dual licensed under the MIT (MIT-LICENSE.txt)
 *  and GPL (GPL-LICENSE.txt) licenses.
 *
 *  Built for jQuery library
 *  http://jquery.com
 *
 */
 
 /*
  To activate the plugin add the following code to your own js file:
  
  $('.your-list-class-name').easyListSplitter({ 
      colNumber: 3
  });
  
 */

 /*
  Modifications:
  2011-aug-29 (Carmela.Santos@aspect.com) 
    - Removed numbers for listcontainer class.  Change setting of listClass and containerClass.  Add "column" class to sublists.
  2011-sep-19 (Carmela.Santos@aspect.com) 
    - Cleanup.  Take lengths of sublists into account.  Removed horizontal option.  Modified logic for how columns are populated.
  2011-oct-05 (Carmela.Santos@aspect.com) 
    - Adjust number of items per bucket as each one is filled up.
  2012-may-15 (Carmela.Santos@aspect.com) 
    - Move items in previous bucket if current ended up too long.
  2014-sep-10 (Carmela.Santos@aspect.com)
    - Use jQuery no-conflict mode.  Add numcolumns.
 */
 
(function($){  
$.fn.qEasyListSplitter = function(options) {
  
  var defaults = {      
    colNumber: 2 // Insert here the number of columns you want. Consider that the plugin will create the number of cols requested only if there are enough items in the list.
  };
      
  this.each(function() {
    
    var obj = $(this);
    var settings = $.extend(defaults, options);
    var totalListElements = $(this).find('li').length;
    var baseColItems = Math.ceil(totalListElements / settings.colNumber);
    var containerAllClasses = $(this).attr('class');
    var containerClass = $(this).attr('class').split(' ')[0];
    
    // -------- Create List Elements given colNumber
    // Creates colNumber+1 sublists--the listCol0 will temporarily contain the original list.
    for (i=0;i<=settings.colNumber;i++)
    {  
      if(i==0){
        $(this).addClass('column listCol0').wrap('<div class="'+containerAllClasses+' columnwrap"></div>');
      } else if($(this).is('ul')){ // Check whether the list is ordered or unordered
        $(this).parents('.columnwrap.'+containerClass).append('<ul class="column listCol'+i+'"></ul>');
      } else{
        $(this).parents('.columnwrap.'+containerClass).append('<ol class="column listCol'+i+'"></ol>');
      }
      $('.'+containerClass+' > ul,.'+containerClass+' > ol').removeClass(containerClass);
    }
    
    
    // -------- Append List Elements to the respective listCol  - Vertical       
    var numitems, prevbucket;
    var k = 1;    
    var thisbucket = $(this).parents('.'+containerClass).find('.listCol'+k);
    
    $(this).children('li').each(function(){
      if ($(thisbucket).find('li').length >= baseColItems) 
      {
        // Check how many items are in the current bucket.  
        // If too many, then move some to previous bucket.
        if (k > 1) {
          prevbucket = $(this).parents('.'+containerClass).find('.listCol'+ (k-1));
          while ($(thisbucket).find('li').length / $(prevbucket).find('li').length > 1.10) {
            $(prevbucket).append($(thisbucket).find('> li:first-child'));
          }
        }
        
        if ($(thisbucket).find('li').length >= baseColItems && k < settings.colNumber) {
          // Adjust baseColItems given the remaining items and buckets
          baseColItems = Math.ceil($(obj).find('li').length / (settings.colNumber-k));
          
          // Current bucket is filled up so go on to the next one
          k++;        
          thisbucket = $(this).parents('.'+containerClass).find('.listCol'+k);
        }
      } 
      $(thisbucket).append(this);
    });
    
    // Remove empty lists
    var wrapper = $(this).parent();
    $(wrapper).find('ol,ul').each(function(){
      if($(this).children().size() == 0) {
        $(this).remove();
      }
    });  
    
    // Note number of columns created
    $(wrapper).addClass('numcolumns' + $(wrapper).find('> .column').length);
    
    // Set class last on the last UL or OL 
    $('.'+containerClass).find('ol:last,ul:last').addClass('last');  
    
  });
};
})(jQuery);

